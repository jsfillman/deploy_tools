#!/usr/bin/env perl 

use lib './perl';
use Switch;
use Data::Dumper;
use KBDeploy;
use KBProvision;
use strict;

my $debug=0;



my $cfg=read_config();
my $global=$cfg->{global};
my $basedir=$global->{dtdir};
my $cfgfile='cluster.ini';

my $command=shift @ARGV;

switch ($command) {
  case /mkvm/ {
    update_available();
    configure_vms();
  }
  case /boot/ {
    KBProvision::boot_nodes($global->{xcatgroup});
  }
  case /syncdt/ {
    sync_dt(@ARGV);
  }
  case /^deploy/ {
    deploy_services(@ARGV);
  }
  case /updatehostassignments/ {
     update_available();
  }
  case /status/ {
     status();
  }
  case /start/ {
    start(@ARGV);
  }
  case /mkhashfile$/ {
     mkhashfile();
  }
  case /resetdeploy/ {
     resetdeploy(@ARGV);
  }
  else {
    printf stderr "Usage: $0 <mkvm|boot|syncdt|deploy|start [all]|mkhashfile|resetdeploy>\n";
    exit 1;
  }
}


sub update_available {
  $cfg->{nodes}->{used}=KBProvision::assignments($global->{xcatgroup});

  # Create a list of nodes that can be used
  for (my $i=1;$i<=$global->{maxnodes};$i++){
    my $name=sprintf "%s%02d",$global->{basename},$i;
    if (! defined $cfg->{nodes}->{used}->{$name}){
      print "Available: $name\n" if $debug;
      push @{$cfg->{nodes}->{available}},$name;
    }
  }
}

#
# For each service, see if there is a host assigned.  If not, create it
#
sub configure_vms {
  foreach my $service (@{$cfg->{servicelist}}){
    #next if $service eq $globaltag;
    print "Service: $service\n" if $debug;
    my $scfg=$cfg->{services}->{$service};
    if (! defined $scfg->{host}){
      print "- Configure $service\n" if $debug;
      my $host=shift @{$cfg->{nodes}->{available}} or die "No more nodes to allocate";
      print "- Assigning $host to $service\n";
      KBProvision::config_host($host,$service,$scfg);
      KBDeploy::update_config($cfgfile,$service,'host',$host);
    }
    else{
      print "- Configured using $scfg->{host}\n" if $debug>1;
    }
  }
}

#
# Copy out deploy_tools
# TODO: Replace with bootstrap process
#
sub sync_dt {
   # Push out the scripts
   my $fl=join " ",@_;
   my $list=KBDeploy::hostlist();
   $list=$fl if $fl;

   warn "syncing dt to hosts $list";
   KBProvision::run_remote_all($list,"[ -e $basedir ] || mkdir $basedir");
   mysystem("xdcp $list $0 $basedir/$0");
   mysystem("xdcp $list $cfgfile $basedir/$cfgfile");
   mysystem("xdcp $list -R perl $basedir/");
   mysystem("xdcp $list -R config $basedir/");
}

#
# Deploy service
#
sub deploy_services{
   my $hashfile=shift;

   if ($hashfile eq 'all'){
     update_available();
     my $list=KBDeploy::hostlist();
     KBProvision::sync_files($list,$basedir,$cfgfile);
     $hashfile=shift;
     if (defined $hashfile){
       KBProvision::sync_files($list,$basedir,$hashfile);
       $hashfile=~s/.*\/// if defined $hashfile;
       print STDERR "Hasfile: $hashfile\n";
     }
   
     #Now run the local scripts
     for my $service (@{$cfg->{servicelist}}){
       my $script=$cfg->{services}->{$service}->{setup} if (defined $cfg->{services}->{$service}->{setup});
       print "Running $script on $service\n";
       mysystem("ssh ".$cfg->{services}->{$service}->{host}." 'cd $basedir/config;./$script $hashfile'");
     }
   }
   else{
     my @sl=myservices();
     for my $service (@sl){
        my $script=$cfg->{services}->{$service}->{setup};
        mysystem("cd $basedir/config;./$script $hashfile");
     }
   }
}

#
# See if things are running
# TODO: Make this better
#
sub status{
   my $list=KBDeploy::hostlist();
   KBProvision::run_remote_all($list,'ps aux|grep /kb|grep -v grep|wc -l|grep 0\$;true');
}

# Run start_service
sub start{
   my $param=shift;

   if ($param eq 'all'){
     sync_dt();
     my $list=KBDeploy::hostlist();

     KBProvision::run_remote_all($list,"cd $basedir/;./$0 start");
   }
   else{
     # This is run on the service node
     my @sl=myservices();

     KBDeploy::start_service(@sl);
   }
}

#
# Genereate tag
#
sub mkhashfile {
  my $tagfile=shift;
  if (! defined $tagfile){ 
    my $ds=`date +%Y%m%d%H%M`;
    chomp $ds;
    $tagfile="tagfile.$ds";
  }
  my $out;
  for my $service (keys %{$cfg->{services}}){
    my $s=$cfg->{services}->{$service}; 
    next if $s->{giturl} eq 'none';
    my $tag=KBDeploy::gittag($service);
    print STDERR "Problem with $service\n" unless length($tag)>0;
    
    $out.="$service $s->{giturl} $tag\n";
  }
  open TF,"> $tagfile" or die "Unable to create $tagfile\n";
  print "$tagfile\n";
  print TF $out;
  close TF;
}

# Removes done file
#
# TODO: Make this cleaner
sub resetdeploy{
   my $list=KBDeploy::hostlist();

   if (@_[0] eq 'local'){
     KBDeploy::reset_complete();
     return;
   }
   elsif (@_[0] ne 'all'){
     $list=join ",",@_;
   }
   KBProvision::run_remote_all($list,"cd $basedir/;./$0 resetdeploy local");
}
