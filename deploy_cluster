#!/usr/bin/env perl 

use lib './perl';
use Config::IniFiles;
use Switch;
use Data::Dumper;
use strict;

my $debug=0;

my $cfgfile="./cluster.ini";
my $basedir="/root/dt";
my $globaltag='global';


my $cfg=read_config($cfgfile);

my $command=shift @ARGV;

switch ($command) {
  case /mkvm/ {
    vmpreflight();
    print Dumper($cfg);
    configure_vm();
  }
  case /boot/ {
    boot_nodes();
  }
  case /confnodes/ {
    config_nodes();
  }
  case /start/ {
  }
  else {
    printf stderr "Usage: $0 <mkvm|boot|confnodes|start>\n";
    exit 1;
  }
}


sub read_config {
   my $file=shift;
   my $cfg;
   my $mcfg=new Config::IniFiles( -file => $cfgfile) or die "Unable to open cluster.ini".@Config::IniFiles::errors[0];

   # Could use the tie option, but let's build it up ourselves

   for my $section ($mcfg->Sections()){
     if ($section eq $globaltag){
       foreach ($mcfg->Parameters($section)){
         $cfg->{global}->{$_}=$mcfg->val($section,$_);
       }
     }
     else {
       push @{$cfg->{servicelist}},$section;
       $cfg->{services}->{$section}->{mem}=$cfg->{global}->{mem};
       $cfg->{services}->{$section}->{cores}=$cfg->{global}->{cores};
       foreach ($mcfg->Parameters($section)){
         $cfg->{services}->{$section}->{$_}=$mcfg->val($section,$_);
       }
     }
   }
  return $cfg;
}  



sub vmpreflight {
  # Check that group exist
  if (system("lsdef -t group ".$cfg->{global}->{xcatgroup}."|grep -c 'Could not' > /dev/null") eq 0 ){
    print "Add group\n";
    system("mkdef -t group $cfg->{global}->{xcatgroup}") eq 0 or die "Unable to create group";
  }

  # Get a list of configured services and used nodes
  open(L,"nodels $cfg->{global}->{xcatgroup} nodelist.comments|");
  while(<L>){
    chomp;
    my ($host,$service)=split /: /;
    $cfg->{services}->{$service}->{host}=$host;
    print "Found $service on $host\n" if $debug;
    $cfg->{nodes}->{used}->{$host}=1;
  }

  # Create a list of nodes that can be used
  for (my $i=1;$i<$cfg->{global}->{maxnodes};$i++){
    my $name=sprintf "%s%02d",$cfg->{global}->{base},$i;
    if (! defined $cfg->{nodes}->{used}->{$name}){
      push @{$cfg->{nodes}->{available}},$name;
    }
  }
}


sub boot_nodes {
  system("rpower $cfg->{global}->{xcatgroup} on > /dev/null") eq 0 or die "Unable to rpower\n"; 
  while(system("nodestat $cfg->{global}->{xcatgroup}|grep -vc sshd > /dev/null") eq 0){
    sleep 5;
  }
  print "All nodes up\n";
}

sub configure_vm {
  foreach my $service (keys %{$cfg->{services}}){
    #next if $service eq $globaltag;
    print "Service: $service\n";
    if (! defined $cfg->{services}->{$service}->{host}){
      print "- Configue $service\n";
      my $host=shift @{$cfg->{nodes}->{available}} or die "No more nodes to allocate";
      print "- Using $host\n";
      config_host($host,$service);
    }
    else{
      print "- Configured using $cfg->{services}->{$service}->{host}\n";
    }
  }
  # Post creation
  system("makehosts $cfg->{global}->{xcatgroup}") eq 0 or die "Unable to run makehost\n"; 
  system("makeconservercf $cfg->{global}->{xcatgroup}") eq 0 or die "Unable to run makeconservercf\n"; 
  system("makedhcp $cfg->{global}->{xcatgroup}") eq 0 or die "Unable to run makedhcp\n"; 
}


sub config_host{
  my $host=shift;
  my $service=shift;

  my $mem=$cfg->{services}->{$service}->{mem};
  my $cores=$cfg->{services}->{$service}->{cores};

  print "Configuring $host for $service with $mem and $cores cores\n";
  system("nodeadd $host groups=".$cfg->{global}->{xcatgroup}.",".$cfg->{global}->{othergroups})==0 or die "Unable to add node";
  system("nodech $host nodelist.comments=$service")==0 or die "nodech failed";
  my $alias=$cfg->{global}->{base}."-".$service;
  system("chdef $host vmmemory=$mem vmcpus=$cores hostnames=$alias")==0 or die "chdef failed";
  system("clonevm $host -b ".$cfg->{global}->{baseimage}) eq 0 or die "Unable to create vm for $host\n";
  if (defined $cfg->{services}->{$service}->{disk}){
    foreach my $size (split /,/,$cfg->{services}->{$service}->{disk}){
      system("chvm $host -a $size") eq 0 or die "Unable to add disk";
    }
  }
}

sub config_nodes{

   vmpreflight();
   # Push out the scripts
   system("xdsh $cfg->{global}->{xcatgroup} '[ -e $basedir ] || mkdir $basedir'") eq 0 or die "Failed to mkdir on remote";
   system("xdcp $cfg->{global}->{xcatgroup} $0 $basedir/$0") eq 0 or die "Failed to copy files";
   system("xdcp $cfg->{global}->{xcatgroup} $cfgfile $basedir/$cfgfile") eq 0 or die "Failed to copy files";
   system("xdcp $cfg->{global}->{xcatgroup} -R perl $basedir/") eq 0 or die "Failed to copy files";
   system("xdcp $cfg->{global}->{xcatgroup} -R config $basedir/") eq 0 or die "Failed to copy files";

   #Now run the local scripts
   for my $service (keys %{$cfg->{services}}){
     my $script=$cfg->{services}->{$service}->{setup};
     if (defined $script){
       print "Runnig $script on $service\n";
       system("ssh ".$cfg->{services}->{$service}->{host}." 'cd $basedir/config;./$script'") eq 0 or die "Unable to run $script\n";
     }
   }
}
