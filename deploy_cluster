#!/usr/bin/env perl 

use lib './perl';
use Switch;
use Data::Dumper;
use KBDeploy;
use strict;

my $debug=0;



my $cfg=read_config();
my $global=$cfg->{global};
my $basedir=$global->{dtdir};
my $cfgfile='cluster.ini';

my $command=shift @ARGV;

switch ($command) {
  case /mkvm/ {
    vmpreflight();
    configure_vms();
  }
  case /boot/ {
    boot_nodes();
  }
  case /syncdt/ {
    sync_dt();
  }
  case /deploy/ {
    deploy_services(@ARGV);
  }
  case /updatehostassignments/ {
     vmpreflight();
  }
  case /status/ {
     status();
  }
  case /start/ {
    start(@ARGV);
  }
  case /mkhashfile$/ {
     mkhashfile();
  }
  else {
    printf stderr "Usage: $0 <mkvm|boot|syncdt|deploy|start [all]|mkhashfile>\n";
    exit 1;
  }
}


sub vmpreflight {
  # Check that group exist
  #if (system("lsdef -t group ".$global->{xcatgroup}."|grep -c 'Could not' > /dev/null") eq 0 ){
  #  print "Add group\n";
  #  mysystem("mkdef -t group $global->{xcatgroup}");
  #}

  # Get a list of configured services and used nodes
  open(L,"nodels $global->{xcatgroup} nodelist.comments|");
  while(<L>){
    chomp;
    my ($host,$service)=split /: /;
    if ($service ne ''){
      $cfg->{services}->{$service}->{host}=$host;
      print "Found $service on $host\n" if $debug;
      $cfg->{nodes}->{used}->{$host}=1;
    }
  }

  # Create a list of nodes that can be used
  for (my $i=1;$i<=$global->{maxnodes};$i++){
    my $name=sprintf "%s%02d",$global->{basename},$i;
    if (! defined $cfg->{nodes}->{used}->{$name}){
      print "Available: $name\n" if $debug;
      push @{$cfg->{nodes}->{available}},$name;
    }
  }
}

#
# Boot all nodes and wait for them to come up.
# TODO: add a timeout
#
sub boot_nodes {
  mysystem("rpower $global->{xcatgroup} on > /dev/null");
  while(system("nodestat $global->{xcatgroup}|grep -vc sshd > /dev/null") eq 0){
    sleep 5;
  }
  print "All nodes up\n";
}

#
# For each service, see if there is a host assigned.  If not, create it
#
sub configure_vms {
  foreach my $service (@{$cfg->{servicelist}}){
    #next if $service eq $globaltag;
    print "Service: $service\n";
    if (! defined $cfg->{services}->{$service}->{host}){
      print "- Configue $service\n";
      my $host=shift @{$cfg->{nodes}->{available}} or die "No more nodes to allocate";
      print "- Using $host\n";
      config_host($host,$service);
    }
    else{
      print "- Configured using $cfg->{services}->{$service}->{host}\n";
    }
  }
  # Post creation
  mysystem("makehosts $global->{xcatgroup}");
  mysystem("makeconservercf $global->{xcatgroup}");
  mysystem("makedhcp $global->{xcatgroup}");
}

#
# Configure a host for a service
#
sub config_host{
  my $host=shift;
  my $service=shift;

  my $scfg=$cfg->{services}->{$service};
  my $mem=$scfg->{mem};
  my $cores=$scfg->{cores};
  $scfg->{host}=$host;

  print "Configuring $host for $service with $mem and $cores cores\n";
  my $ct=`nodels $global->{xcatgroup} |grep -c $host`;
  chomp $ct;
  if ($ct eq 0 ){
    print STDERR "Adding $host\n" if $debug;
    mysystem("nodeadd $host groups=".$global->{xcatgroup}.",".$global->{othergroups});
  }
  mysystem("nodech $host nodelist.comments=$service");
  my $alias=$global->{basename}."-".$service;
  mysystem("nodech $host vm.memory=$mem vm.cpus=$cores hosts.hostnames=$alias");
  mysystem("clonevm $host -b ".$global->{baseimage});
  if (defined $scfg->{disk}){
    foreach my $size (split /,/,$scfg->{disk}){
      mysystem("chvm $host -a $size");
    }
  }
  KBDeploy::update_config($cfgfile,$service,'host',$host);
}

#
# Copy out deploy_tools
# TODO: Replace with bootstrap process
#
sub sync_dt {
   # Push out the scripts
   my $xg=$global->{xcatgroup};
   my $fl=join " ",@_;

   mysystem("xdsh $xg '[ -e $basedir ] || mkdir $basedir'");
   mysystem("xdcp $xg $0 $basedir/$0");
   mysystem("xdcp $xg $cfgfile $basedir/$cfgfile");
   mysystem("xdcp $xg -R perl $basedir/");
   mysystem("xdcp $xg -R config $basedir/");
}

# Propogate a list of files to the basedir on each node
#
# TODO: Move into KBDeploy
sub sync_files {
   my $xg=$global->{xcatgroup};
   my $fl=join " ",@_;
   mysystem("xdcp $xg $fl $basedir/") if $fl ne '';
}

#
# Deploy service
#
sub deploy_services{
   my $hashfile=shift;

   if ($hashfile eq 'all'){
     vmpreflight();
     $hashfile=shift;
     sync_files($cfgfile,$hashfile);
     $hashfile=~s/.*\/// if defined $hashfile;
     print STDERR "Hasfile: $hashfile\n";
   
     #Now run the local scripts
     for my $service (@{$cfg->{servicelist}}){
       my $script=$cfg->{services}->{$service}->{setup} if (defined $cfg->{services}->{$service}->{setup});
       print "Runnig $script on $service\n";
       mysystem("ssh ".$cfg->{services}->{$service}->{host}." 'cd $basedir/config;./$script $hashfile'");
     }
   }
   else{
     my @sl=myservices();
     for my $service (@sl){
        my $script=$cfg->{services}->{$service}->{setup};
        mysystem("cd $basedir/config;./$script $hashfile");
     }
   }
}

#
# See if things are running
# TODO: Make this better
#
sub status{
   my $xg=$global->{xcatgroup};
   mysystem("xdsh $xg 'ps aux|grep /kb|grep -v grep|wc -l|grep 0\$'");
}

# Run start_service
sub start{
   my $param=shift;

   if ($param eq 'all'){
     sync_nodes();
     my $xg=$global->{xcatgroup};

     mysystem("xdsh $xg 'cd $basedir/;./$0 startservice'");
   }
   else{
     my @sl=myservices();

    # from KBDeploy
    start_service(@sl);
   }
}

#
# Genereate tag
#
sub mkhashfile {
  my $tagfile=shift;
  if (! defined $tagfile){ 
    my $ds=`date +%Y%m%d%H%M`;
    chomp $ds;
    $tagfile="tagfile.$ds";
  }
  my $out;
  for my $service (keys %{$cfg->{services}}){
    my $s=$cfg->{services}->{$service}; 
    next if $s->{giturl} eq 'none';
    my $tag=KBDeploy::gittag($service);
    
    $out.="$service $s->{giturl} $tag\n";
  }
  open TF,"> $tagfile" or die "Unable to create $tagfile\n";
  print "$tagfile\n";
  print TF $out;
  close TF;
}
