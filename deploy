#!/bin/sh

# Defaults and paths
KB_BASE="/kb"
KB_DEPLOY="${KB_BASE}/deployment"
KB_DC="${KB_BASE}/dev_container"
KB_RT="${KB_BASE}/runtime"

if [ -z ${SERVICES} ] ; then
  SERVICES="/root/services"
fi
HOSTLIST="/root/hostlist"

DEFCFG="/root/deployment.cfg"
MKCFG="/root/mkcfg"

LOGFILE="/tmp/deploy.log"

MONGODB="/data/db"

#if this is a bleeding edge deploy, ignore any errors        
#FIXME: May want to handle this another way
if [ $(hostname) = "kbase-KVM" ]; then
  MAKE_OPTIONS="${MAKE_OPTIONS} --ignore-errors"
fi

error () {
  echo "ERROR: $@"
  exit 1
}

# Helper function to clone a module and checkout a tag.
clonetag () {
  package=$1
  mytag=$(grep ":${package}:" $SERVICES|awk -F: '{print $9}')
  echo "$package $mytag"

  echo "- Cloning $package"
  if [ -e ${package} ] ; then
    cd ${package}
    # Make sure we are on head
    git checkout master > /dev/null 2>&1 || error "Failed to switch to master for ${package}"
    git pull > /dev/null 2>&1 || error "Git pull failed for ${package}"
    cd ..
  else
    git clone ssh://kbase@git.kbase.us/${package} > /dev/null 2>&1 || error "Git failed for ${package}"
  fi
  if [ ! -z "${mytag}" ] && [ "${mytag}"!="HEAD" ] ; then
    cd $package
    # Fix me.  Bad logic.
    if [ "${mytag}" = "latest" ] ; then
      mytag=$(git tag -l 2>&1|sort -n|tail -1)
      echo " * Using latest tag $mytag for $package"
    fi
    git checkout "${mytag}" > /dev/null 2>&1 || error "Git checkout failed"
    cd ..
  fi
}

# Recursively get dependencies
#
getdeps () {
  mserv=$1
  echo "- Processing dependencies for $mserv"

  DEP="${KB_DC}/modules/${mserv}/DEPENDENCIES"
  if [ -e "$DEP" ] ; then
    for dep in $(cat $DEP) ; do
      if [ ! -e "${KB_DC}/modules/${dep}" ] ; then
        clonetag ${dep}
        getdeps $dep
      fi
    done
  fi
}

# Deploy the Dev Container
#
deploy_devcontainer () {
  [ -e ${KB_BASE} ] || mkdir ${KB_BASE}
  cd ${KB_BASE}
  clonetag dev_container
  cd dev_container/modules

  for pack in kb_seed kbapi_common typecomp auth idserver ; do
    clonetag $pack
  done
  cd ${KB_DC}
  ./bootstrap ${KB_RT}
  . ./user-env.sh
  echo "Running Make in dev_container"
  make ${MAKE_OPTIONS} >> $LOGFILE 2>&1

  echo "Running make deploy"
  make deploy ${MAKE_OPTIONS} >> $LOGFILE 2>&1
  echo "===="
}

# Hot fix
hotfix () {
  # Let's do some quick tests
  if [ ! -e "${KB_DEPLOY}" ] ; then
    echo "No deployment found to hotfix."
    exit -1
  fi

  if [ ! -e "${KB_DC}" ] ; then
    echo "No dev_container found to hotfix from."
    exit -1
  fi

  cd ${KB_DC}
  . ./user-env.sh
  cd modules
  for tserv in $* ; do
    if [ -e "$KB_DC/modules/$tserv" ] ; then
      echo "Hotfixing $tserv"
      clonetag $tserv
      cd $tserv
      make deploy  >> $LOGFILE 2>&1|| error "Make deploy of ${tserv} failed"
    fi
  done
  exit
}

# Start service helper function
#
start_service () {
  mserv=$1

  spath=$(grep ":${mserv}:" $SERVICES|awk -F: '{print $8}')
  if [ -e "${KB_DEPLOY}/services/${spath}/start_service" ] ; then
    ${KB_DEPLOY}/services/${spath}/start_service &
  else
    echo "No start script found in ${serv}"
  fi
}

#
# Figure out what service we should run
# - Cache the answer in file named service for later reference
#
find_service () {
    if [ ! -e 'service' ] ; then
      host=$(hostname)
      if [ $(grep -c $host $HOSTLIST) -eq 0 ] ; then
        host=$(ec2metadata --local-hostname|sed 's/\..*//'|sed 's/server-//')
      fi
      echo "Host: $host"
      serv=$(grep $host $HOSTLIST|awk -F: '{print $2}')
      echo $serv > service
    else
      serv=`cat service`
    fi
    if [ -z "$serv" ] ; then
      echo "Unable to determine service"
      exit -1
    fi
    echo "Service is $serv"
}


# Init Mongo
#
mongo_init () {
    MONGO_BASE=$(dirname ${MONGODB})
    [ -e "$MONGO_BASE" ] || mkdir $MONGO_BASE
    if [ $(df |grep -c /mnt) -gt 0 ] ; then
      echo "Using /mnt for mongo"
      [ -e "/mnt/db" ] || mkdir /mnt/db 
      [ -e "$MONGODB" ] || ln -s /mnt/db $MONGODB
    else
      [ -e "$MONGODB" ] || mkdir $MONGODB
    fi
    echo "Starting MongoDB"
    /kb/runtime/bin/mongod --dbpath $MONGODB
}

docs_init () {
  for service in $(cd ${KB_DEPLOY}/services/;ls) ; do
    rm ${KB_DEPLOY}/docs/$service
    # Special exception for cdmi.  Yuck!
    if [ "$service" = "cdmi_api" ] ; then
      [ "$serv" = "kb_seed" ] && ln -s ${KB_DEPLOY}/services/$service/webroot ${KB_DEPLOY}/docs/$service
    else
      ln -s ${KB_DEPLOY}/services/$service/webroot ${KB_DEPLOY}/docs/$service
    fi
  done
}

# Is this deploying client only
client_host () {
  [ -e $LOGFILE ] && rm $LOGFILE
  deploy_devcontainer
  cd ${KB_DC}/modules

  for sv in $(cat $SERVICES | grep $(hostname) | awk -F: '{print $3}')
  do
    if [ "$sv" = "clients" ]; then
      continue
    fi
    clonetag ${sv}
  done
  cd ${KB_DC}
  echo "Starting bootstrap at $(pwd)"
  ./bootstrap /kb/runtime/
  . /kb/dev_container/user-env.sh
  echo "Running make"
  make  >> $LOGFILE 2>&1|| error "Make failed"
  echo "Running make deploy"
  make deploy  >> $LOGFILE 2>&1|| error "Make deploy failed"
  ${MKCFG}
}

# Stop Services
#
stop_service () {
  mserv=$1
  [ -e "${KB_DEPLOY}/services/${mserv}/stop_service" ] && ${KB_DEPLOY}/services/${mserv}/stop_serviceh
}


deploy_service () {

  # Try to autodetect the client host
  #
  if [ $(echo $serv|grep -c clients) -gt 0 ] ; then
    echo "Client host detected."
    client_host
    return
  fi

  stop_service

  # Extingush all traces of previous deployments
  [ -e ${KB_DEPLOY} ] && mv ${KB_DEPLOY} ${KB_DEPLOY}.$(date +%s)
  [ -e ${KB_DC} ] && rm -rf ${KB_DC}

  # Empty log file
  [ -e $LOGFILE ] && rm $LOGFILE

  # Create the dev container and some common dependencies
  if [ ! -e "${KB_DEPLOY}/bin/compile_typespec" ] ; then
    deploy_devcontainer
  fi

  echo "Deploying $serv"
  # Clone or update the module
  cd ${KB_DC}/modules
  clonetag ${serv} ${tag}
 
  # Now get any dependencies
  getdeps ${serv}
  cd ${KB_DC}

  echo "Starting bootstrap at $(pwd)"
  ./bootstrap /kb/runtime/
  . ${KB_DC}/user-env.sh

  echo "Running make"
  make  >> $LOGFILE 2>&1|| error "Make failed"
  echo "Running make deploy"
  make deploy  >> $LOGFILE 2>&1|| error "Make deploy failed"

  # Copy the deployment config from the reference copy
  if [ -e "$DEFCFG" ] ; then
    /bin/cp ${DEFCFG} ${KB_DEPLOY}
  else
    ${MKCFG}
  fi

  start_service ${serv}
}


find_service

case "$1" in
	start)
		start_service ${serv}
                ;;
        stop)
		stop_service ${serv}
                ;;
        restart)
		stop_service ${serv}
		start_service ${serv}
                ;;
        mongo)
		mongo_init
                ;;
        docs)
		docs_init
                ;;
        deploy)
		deploy_service
                ;;
	hotfix)
		# Hotfix requires additional args
		shift
		hotfix $*
		;;
        client)
		client_host
                ;;
        status)
		ps aux|grep $serv|grep -v grep
                ;;
        *)
                echo $"Usage: $0 {start|stop|restart|deploy|docs|mongo|client|status}"
                RETVAL=2
esac
exit $RETVAL
