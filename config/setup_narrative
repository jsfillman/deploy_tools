#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../perl/";
use KBDeploy;
use strict;

# This is the name for now, as this is what the Lua provisioner looks for to fire up a Narrative.
my $NAR_NAME="kbase/narrative";
my $DC="/kb/dev_container";

my $cfg=read_config();
my $hashfile;

my @sl=myservices();
exit unless scalar(@sl);

my $narr_host=$cfg->{services}->{narrative}->{'service-url'};
$narr_host=~s/http.*\/\///;

$hashfile=shift @ARGV if ($ARGV[0] ne '-f' && $ARGV[0] ne '-b');
exit if $ARGV[0] eq 'bootstrap';


mkdir "/kb" unless -e "/kb";
mkdir "$DC" unless -e "$DC";
chdir "$DC";

if ($ARGV[0] eq 'bootstrap' ){
  KBDeploy::clonetag('bootstrap');
  bootstrap();
  exit;
}

exit if (KBDeploy::is_complete(@sl) && $ARGV[0] ne '-f');

mkdir "/kb/deployment" unless -e "/kb/deployment";
KBDeploy::clonetag('bootstrap') unless -e "$DC/bootstrap";
KBDeploy::clonetag('narrative') unless -e "$DC/narrative";
KBDeploy::clonetag('ui-common') unless -e "$DC/ui-common";

# Move this to bootstrap section?
mysystem("yes|/bin/sh narrative/docker/lua-dependencies.txt") unless -e "/usr/local/lib/lua";


chdir "$DC/ui-common";
print "Deploying ui-common\n";
mysystem("./deployFunctionalSite.sh > /dev/null");

# Copy lua files
mysystem("cp $DC/narrative/docker/*.lua /kb/deployment/services/narrative/docker/");

# TODO:  Remove refernces to next.  Get it from config file
# TODO:  abstract out this recursive grep and sed into a perl function
#
# Replace kbase.us/serices with new url
print "Replacing kbase in ui-common\n";
mysystem('grep -rl //kbase.us/services /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/\/\/kbase.us\/services/\/\/next.kbase.us\/services/g" ');

# Samething for www.kbase.us
mysystem('grep -rl //www.kbase.us/services /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/\/\/www.kbase.us\/services/\/\/next.kbase.us\/services/g" ');

# Now for the search url
mysystem('grep -rl  dev07.berkeley.kbase.us/search /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/dev07.berkeley.kbase.us/next.kbase.us\/services/"');

# Now for the narrative url
print "Replacing narrative in ui-common\n";
#mysystem('grep -rl narrative.kbase.us /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'/"');
mysystem('grep -rl narrative.kbase.us /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'"');

# Build docker
chdir "$DC/narrative" or die "Unable to change dir";
print "Replacing kbase in narrative $DC/narrative\n";
mysystem('grep -rl //kbase.us/services '.$DC.'/narrative 2>/dev/null|xargs sed -i "s/\/\/kbase.us\/services/\/\/next.kbase.us\/services/g" || echo "Done" ');
#mysystem('grep -rl narrative.kbase.us '.$DC.'/narrative 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'/" || echo "Done" ');
mysystem('grep -rl narrative.kbase.us '.$DC.'/narrative 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'" || echo "Done" ');
# Now for the narrative url
print "Running buildNarrativeContainer\n";
mysystem("sh ./buildNarrativeContainer.sh");

KBDeploy::mark_complete(@sl);

sub bootstrap {
  if ( ! -e "/usr/bin/pip") {
    mysystem("apt-get update");
    mysystem("apt-get -y install python-pip");
  }

  chdir "/kb" or die "Unable to chdir";
  KBDeploy::clonetag('bootstrap') unless -e "/kb/bootstrap";

  mysystem("apt-get install -y libcurl4-gnutls-dev") unless -e "/usr/bin/curl-config";
  mysystem("apt-get install -y python-dev ncurses-dev") unless -e "/usr/include/ncurses.h";
  #mysystem("pip install -r bootstrap/kb_python_runtime/python-pip-list-narrative");


  mysystem("apt-get install -y python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose") unless -e "/usr/bin/ipython";


  mysystem("apt-get -y install python-software-properties") unless -e "/usr/bin/add-apt-repository";
  if ( ! -e "/usr/sbin/nginx" ){
    mysystem("echo ''|add-apt-repository ppa:nginx/stable");
    mysystem("apt-get update ; apt-get install -y nginx");
  }

  if ( ! -e "/usr/bin/lua5.1" ){
    mysystem("apt-get install lua5.1");
    mysystem("apt-get install luarocks");
    mysystem("apt-get install liblua5.1-0");
    mysystem("apt-get install liblua5.1-0-dev");
    mysystem("apt-get install liblua5.1-json");
    mysystem("apt-get install liblua5.1-lpeg2");
    mysystem("luarocks install luasocket");
    mysystem("luarocks install luajson");
    mysystem("luarocks install penlight");
    mysystem("luarocks install lua-spore");
    mysystem("luarocks install luacrypto");
  }

}
