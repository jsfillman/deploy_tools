#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../perl/";
use KBDeploy;
use strict;

my $hashfile;

$hashfile=shift @ARGV if ($ARGV[0] ne '-f' && $ARGV[0] ne '-b');
exit if $ARGV[0] eq 'bootstrap';

exit if (KBDeploy::is_complete('invocation') && $ARGV[0] ne '-f');

my $cfg=read_config();
my $MAKE_OPTIONS=$cfg->{global}->{'make-options'};

my $LOGFILE="/tmp/deploy.log";
my $KB_DC=$cfg->{'global'}->{devcontainer};

stop_service('invocation');

# these are service names
#my @sl=('Workspace','invocation','cdmi_api', 'translation', 'CompressionBasedDistance', 'protein_info_service', 'trees', 'fbaModelServices', 'probabilistic_annotation', 'genome_annotation', 'idserver', 'handle_service', 'ontology_service', 'plant_expression_service','kmer_annotation_figfam', 'meme', 'networks','CoExpression', 'KBaseExpression');

my @sl=('jars','Workspace', 'invocation','cdmi_api', 'kbrest_common', 'typecomp', 'communities_api', 'matR', 'translation', 'CompressionBasedDistance', 'protein_info_service', 'trees', 'fbaModelServices', 'probabilistic_annotation', 'genome_annotation', 'idserver', 'handle_service', 'ontology_service', 'plant_expression_service','kmer_annotation_figfam', 'meme', 'networks','CoExpression', 'KBaseExpression');

# these are repo names (would like to calculate from @sl)
#my @override_dc=('workspace_deluxe','invocation','cdmi_api', 'translation', 'CompressionBasedDistance', 'protein_info_service', 'trees', 'fbaModelServices', 'probabilistic_annotation', 'genome_annotation', 'genotype_phenotype_api', 'idserver', 'handle_service', 'ontology_service', 'plant_expression_service','kmer_annotation_figfam', 'meme', 'networks','coexpression', 'KBaseExpression');
# build fails: workspace (fixed in kkellerlbl fork), KBaseExpression (doesn't exist), trees (works fine outside autodeploy?), meme (needs #include in typecomp), networks (not sure)
my @override_dc=('invocation','kb_seed', 'kbrest_common', 'jars', 'workspace_deluxe', 'communities_api', 'translation', 'matR', 'cbd', 'trees', 'protein_info_service', 'KBaseFBAModeling', 'probabilistic_annotation', 'genome_annotation', 'genotype_phenotype_api', 'idserver', 'handle_service', 'ontology_service', 'plant_expression_service','kmer_annotation_figfam', 'coexpression');

#m5nr
#uploader
#search

my $ad=$KB_DC."/autodeploy.cfg";
KBDeploy::generate_autodeploy($ad,\@override_dc);
chdir "$KB_DC/modules";
foreach my $svc (@sl)
{
  warn "cloning $svc";
  KBDeploy::clonetag($svc);
}

print "Running auto deploy\n";
chdir $KB_DC;
mysystem(". $KB_DC/user-env.sh;perl auto-deploy $ad >> $LOGFILE 2>&1");

start_service('invocation');

start_service('invocation');
KBDeploy::mark_complete(@sl);
