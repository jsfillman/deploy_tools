#!/usr/bin/env perl 

# TODO: Change things to run as non-root

use lib '../perl';
use Config::IniFiles;
use Switch;
use Data::Dumper;
use KBDeploy;
use strict;

my $debug=0;

my $cfgfile="../cluster.ini";
my $basedir="/root/dt";
my $gtag='global';

my $cfg=read_config($cfgfile,$gtag);


# Defaults and paths
my $KB_BASE="/kb";
my $KB_DEPLOY="$KB_BASE/deployment";
my $KB_DC="$KB_BASE/dev_container";
my $KB_RT="$KB_BASE/runtime";
my $MAKE_OPTIONS=$ENV{"MAKE_OPTIONS"};

$KB_DEPLOY=$cfg->{$gtag}->{deploydir} if (defined $cfg->{$gtag}->{deploydir});
$KB_DC=$cfg->{$gtag}->{devcontainer} if (defined $cfg->{$gtag}->{devcontainer});
$KB_RT=$cfg->{$gtag}->{runtime} if (defined $cfg->{$gtag}->{runtime});

#LOGFILE="/tmp/deploy.log"

my $me=`hostname`;
chomp $me;

$ENV{'GIT_SSH'}=$basedir."/config/gitssh";

my @sl;
for my $s (keys %{$cfg->{services}}){
  push @sl,$s if ($cfg->{services}->{$s}->{host} eq $me);
}
deploy_service(@sl);

# Helper function to clone a module and checkout a tag.
sub clonetag {
  my $package=shift;
  my $mytag=shift;

  $mytag="head" if ! defined $mytag; 
  $mytag=$cfg->{$gtag}->{tag} if defined $cfg->{$gtag}->{tag};
  print "$package $mytag\n";

  print "- Cloning $package\n";
  if ( -e $package ) {
    chdir $package;
    # Make sure we are on head
    mysystem("git checkout master");
    mysystem("git pull");
    chdir("../");
  }
  else {
    my $giturl;
    if (defined $cfg->{services}->{$package}->{giturl}){
      $giturl=$cfg->{services}->{$package}->{giturl} if defined $cfg->{services}->{$package}->{giturl};
    }
    else{
      $giturl=$cfg->{$gtag}->{repobase}."/".$package;
    }
    mysystem("git clone $giturl");
  }
  if ( $mytag ne "head" ) {
    chdir $package;
    mysystem("git checkout \"$mytag\"");
    chdir "../";
  }
}

# Recursively get dependencies
#
sub getdeps {
  my $mserv=shift;
  print "- Processing dependencies for $mserv\n";

  my $DEP="$KB_DC/modules/$mserv/DEPENDENCIES";
  if ( -e "$DEP" ) {
    open(D,$DEP) or die "Unable to open $DEP";
    while (my $dep=<D>){
      chomp $dep;
      if ( ! -e "$KB_DC/modules/$dep" ) {
        clonetag $dep;
        getdeps $dep;
      }
    }
  }
}

# Deploy the Dev Container
#
sub deploy_devcontainer {
  mkdir $KB_BASE;
  chdir $KB_BASE;
  clonetag "dev_container";
  chdir "dev_container/modules";

  for my $pack ("kbapi_common","typecomp","jars","auth" ) {
    clonetag $pack;
  }
  chdir("$KB_DC");
  mysystem("./bootstrap $KB_RT");

  # Fix up setup
  mysystem("$basedir/config/fixup_dc");
 
  print "Running Make in dev_container\n";
  mysystem(". ./user-env.sh;make $MAKE_OPTIONS");

  print "Running make deploy\n";
  mysystem(". ./user-env.sh;make deploy $MAKE_OPTIONS");
  print "====\n";
}

# Start service helper function
#
sub start_service {
  for my $s (@_)  {
    my $spath=$s;
    $spath=$cfg->{services}->{$s}->{basedir} if (defined $cfg->{services}->{$s}->{basedir});
    if ( -e "$KB_DEPLOY/services/$spath/start_service" ) {
      mysystem(". $KB_DEPLOY/user-env.sh;$KB_DEPLOY/services/$spath/start_service");
    }
    else {
      print "No start script found in $s\n";
    }
  }
}

#sub docs_init {
#  for service in $(cd $KB_DEPLOY/services/;ls) ){
#    rm ${KB_DEPLOY}/docs/$service
#    # Special exception for cdmi.  Yuck!
#    if [ "$service" = "cdmi_api" ] ) {
#      [ "$serv" = "kb_seed" ] && ln -s ${KB_DEPLOY}/services/$service/webroot ${KB_DEPLOY}/docs/$service
#    else
#      ln -s ${KB_DEPLOY}/services/$service/webroot ${KB_DEPLOY}/docs/$service
#    }
#  }
#}

# Stop Services
#
sub stop_service {
  for my $s (@_) {
    my $spath=$s;
    $spath=$cfg->{services}->{$s}->{basedir} if defined $cfg->{services}->{$s}->{basedir};
    if ( -e "$KB_DEPLOY/services/$spath/stop_service"){
      mysystem(". $KB_DEPLOY/user-env.sh;$KB_DEPLOY/services/$spath/stop_service");
    }
  }
}


sub deploy_service {

  # Try to autodetect the client host
  #
  stop_service();

  # Extingush all traces of previous deployments
  my $d=`date +%s`;
  rename($KB_DEPLOY,"$KB_DEPLOY.$d") if -e $KB_DEPLOY;
  mysystem("rm -rf $KB_DC") if (-e $KB_DC);

  # Empty log file
  #unlink $LOGFILE if ( -e $LOGFILE );

  # Create the dev container and some common dependencies
  if ( ! -e "$KB_DEPLOY/bin/compile_typespec" ) {
    deploy_devcontainer();
  }

  chdir "$KB_DC/modules";
  for my $mserv (@_) {
    print "Deploying $mserv\n";
    # Clone or update the module
    clonetag $mserv;
    # Now get any dependencies
    getdeps $mserv;
  }
 
  chdir("$KB_DC");

  print "Starting bootstrap at $(pwd)\n";
  mysystem("./bootstrap $KB_RT");
  # Fix up setup
  mysystem("$basedir/config/fixup_dc");

  print "Running make\n";
  mysystem(". $KB_DC/user-env.sh;make");

  print "Running make deploy\n";
  mysystem(". $KB_DC/user-env.sh;make deploy");

  # Copy the deployment config from the reference copy

  start_service @_
}


